"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/socketio";
exports.ids = ["pages/api/socketio"];
exports.modules = {

/***/ "socket.io":
/*!****************************!*\
  !*** external "socket.io" ***!
  \****************************/
/***/ ((module) => {

module.exports = import("socket.io");;

/***/ }),

/***/ "uuid":
/*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
/***/ ((module) => {

module.exports = import("uuid");;

/***/ }),

/***/ "(api)/./pages/api/socketio.js":
/*!*******************************!*\
  !*** ./pages/api/socketio.js ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"config\": () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var socket_io__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! socket.io */ \"socket.io\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uuid */ \"uuid\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([socket_io__WEBPACK_IMPORTED_MODULE_0__, uuid__WEBPACK_IMPORTED_MODULE_1__]);\n([socket_io__WEBPACK_IMPORTED_MODULE_0__, uuid__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\nconst Socketio = (req, res)=>{\n    // let ROOMS = [];\n    const WIN_CON = [\n        [\n            0,\n            1,\n            2\n        ],\n        [\n            3,\n            4,\n            5\n        ],\n        [\n            6,\n            7,\n            8\n        ],\n        [\n            0,\n            3,\n            6\n        ],\n        [\n            1,\n            4,\n            7\n        ],\n        [\n            2,\n            5,\n            8\n        ],\n        [\n            0,\n            4,\n            8\n        ],\n        [\n            2,\n            4,\n            6\n        ]\n    ];\n    let ROOMS = [];\n    let PLAYERS = [];\n    res.status(200).json({\n        user: \"hazel\"\n    });\n    if (!res.socket.server.io) {\n        console.log(\"*First use, starting socket.io\");\n        const io = new socket_io__WEBPACK_IMPORTED_MODULE_0__.Server(res.socket.server);\n        // SOCKET IOs\n        const getUniqueListBy = (arr, key)=>{\n            return [\n                ...new Map(arr.map((item)=>[\n                        item[key],\n                        item\n                    ])).values()\n            ];\n        };\n        const isPlayerExist = (obj)=>{\n            for(let i = 0; i < PLAYERS.length; i++){\n                if (PLAYERS[i].id === obj.id && PLAYERS[i].name === obj.name) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        io.on(\"connection\", (socket)=>{\n            const emitserverData = ()=>{\n                io.emit(\"server-data\", {\n                    onlinePlayers: PLAYERS.filter((p)=>{\n                        if (p.status === \"online\") {\n                            return true;\n                        }\n                        return false;\n                    }).length\n                });\n            };\n            socket.onAny((event, args)=>{\n                if (event === \"player-details\") {\n                    if (args.type === \"initial\") {\n                        const obj = {\n                            socketId: socket.id,\n                            id: args.id,\n                            name: args.name,\n                            win: 0,\n                            lose: 0,\n                            draw: 0,\n                            status: \"online\"\n                        };\n                        if (!isPlayerExist(obj)) {\n                            PLAYERS.push(obj);\n                        } else {\n                            const objIndex = PLAYERS.findIndex((obj)=>obj.id === args.id);\n                            PLAYERS[objIndex].status = \"online\";\n                            PLAYERS[objIndex].socketId = socket.id;\n                        }\n                    }\n                }\n                emitserverData();\n            });\n            // socket.on('player-details', (data) => {\n            //     console.log(data);\n            // })\n            socket.on(\"enemy-timer\", (data)=>{\n                socket.to(data.room).emit(\"enemy-timer\", {\n                    timer: data.timer\n                });\n            });\n            socket.on(\"disconnecting\", ()=>{\n                const room = Array.from(socket.rooms)[1];\n                socket.leave(room);\n                // socket.to(room).emit('enemy-disconnect', {});\n                socket.to(room).emit(\"exit-room\", {});\n                // set the player to offline\n                const objIndex = PLAYERS.findIndex((obj)=>obj.socketId === socket.id);\n                if (objIndex >= 0) {\n                    PLAYERS[objIndex].status = \"offline\";\n                    PLAYERS[objIndex].socketId = \"\";\n                }\n                // remove room/s that belongs to someone disconnected\n                ROOMS = ROOMS.filter((item)=>item.hostId !== socket.id);\n                emitserverData();\n            });\n            socket.on(\"exit-room\", (data, callback)=>{\n                socket.leave(data.room);\n                ROOMS = ROOMS.filter((item)=>item.room !== data.room);\n                callback({\n                    status: \"ok\"\n                });\n                socket.to(data.room).emit(\"exit-room\", {});\n            });\n            socket.on(\"rematch\", (data, callback)=>{\n                socket.to(data.room).emit(\"rematch\");\n                if (typeof data.acceptRematch !== \"undefined\") {\n                    if (data.acceptRematch) {\n                        console.log(\"accepted\");\n                        io.to(data.room).emit(\"game-ready\", {\n                            isReady: true\n                        });\n                    }\n                }\n                callback({\n                    status: \"ok\"\n                });\n            });\n            socket.on(\"move\", (data)=>{\n                socket.to(data.room).emit(\"move\", {\n                    moves: data.moves,\n                    turn: data.turn\n                });\n                const winObj = checkWinV2(data.turn, data.moves);\n                if (winObj !== false) {\n                    io.to(data.room).emit(\"game-result\", {\n                        winner: winObj.symbol,\n                        result: \"done\",\n                        combination: winObj.combination\n                    });\n                } else if (isDraw(data.moves)) {\n                    console.log(\"draw\", isDraw(data.moves));\n                    io.to(data.room).emit(\"game-result\", {\n                        winner: \"none\",\n                        result: \"draw\"\n                    });\n                }\n            });\n            socket.on(\"times-up\", (data)=>{\n                io.to(data.room).emit(\"game-result\", {\n                    winner: \"none\",\n                    result: \"timesup\",\n                    winner: data.symbol === \"x\" ? \"circle\" : \"x\"\n                });\n            });\n            socket.on(\"join-room\", (data)=>{\n                getAvailableRoom(io).then((r)=>{\n                    if (r) {\n                        // find available room and join\n                        getRoomDetails(r).then((h)=>{\n                            if (h) {\n                                socket.emit(\"joined-room\", {\n                                    room: r,\n                                    isHost: false,\n                                    isReady: true,\n                                    name: typeof h.hostName === \"undefined\" || h.hostName === null || h.hostName === \"\" ? \"unknown\" : h.hostName\n                                });\n                                socket.to(r).emit(\"game-ready\", {\n                                    isReady: true,\n                                    name: data.name\n                                });\n                                socket.join(r);\n                            }\n                        });\n                    } else {\n                        // create room\n                        let autoroom = (0,uuid__WEBPACK_IMPORTED_MODULE_1__.v4)();\n                        socket.join(autoroom);\n                        ROOMS.push({\n                            hostId: data.id,\n                            hostName: data.name,\n                            room: autoroom\n                        });\n                        socket.emit(\"joined-room\", {\n                            room: autoroom,\n                            isHost: true,\n                            isReady: false\n                        });\n                    }\n                });\n            });\n        });\n        function getActiveRooms(io) {\n            // Convert map into 2D list:\n            // ==> [['4ziBKG9XFS06NdtVAAAH', Set(1)], ['room1', Set(2)], ...]\n            const arr = Array.from(io.sockets.adapter.rooms);\n            // Filter rooms whose name exist in set:\n            // ==> [['room1', Set(2)], ['room2', Set(2)]]\n            const filtered = arr.filter((room)=>!room[1].has(room[0]));\n            // Return only the room name: \n            // ==> ['room1', 'room2']\n            const res = filtered.map((i)=>i[0]);\n            return res;\n        }\n        const adminGetRooms = (io)=>{\n            io.emit(\"admin-rooms\", {\n                rooms: ROOMS,\n                activeRooms: getActiveRooms(io)\n            });\n        };\n        const isDraw = (_moves)=>{\n            return [\n                ..._moves\n            ].every((index)=>{\n                return index === \"circle\" || index === \"x\";\n            });\n        };\n        const checkWin = (symbol, _moves)=>{\n            return WIN_CON.some((combination)=>{\n                return combination.every((index)=>{\n                    return _moves[index] === symbol;\n                });\n            });\n        };\n        const checkWinV2 = (symbol, _moves)=>{\n            for(let i = 0; i < WIN_CON.length; i++){\n                const c = WIN_CON[i].every((index)=>_moves[index] === symbol);\n                if (c) return {\n                    combination: WIN_CON[i],\n                    symbol: symbol\n                };\n            }\n            return false;\n        };\n        const getAvailableRoom = async (io)=>{\n            const rooms = getActiveRooms(io);\n            for (let room of rooms){\n                let c = await io.in(room).fetchSockets();\n                let filtered = c.map(function(item) {\n                    return item.id;\n                });\n                if (filtered.length === 1) {\n                    return room;\n                } else {\n                    console.log(\"no room available\");\n                }\n            }\n        };\n        const getRoomDetails = async (room)=>{\n            const h = await ROOMS.find((item)=>item.room === room);\n            if (h) {\n                return h;\n            } else {\n                console.log(\"Error: No room found, Function: getRoomDetails\");\n            }\n        };\n        const getRoomClients = async (io, room)=>{\n            const c = await io.in(room).fetchSockets();\n            const filtered = c.map(function(item) {\n                return item.id;\n            });\n            return filtered;\n        };\n        res.socket.server.io = io;\n    } else {\n    // console.log('socket.io already running');\n    }\n    res.end();\n};\nconst config = {\n    api: {\n        bodyParser: false\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Socketio);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/socketio.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/socketio.js"));
module.exports = __webpack_exports__;

})();